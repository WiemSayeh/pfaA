import React, { useState, useEffect } from "react";
import { getFirestore, collection, addDoc, serverTimestamp, getDocs } from "firebase/firestore";
import { getAuth } from "firebase/auth";
import { initializeApp } from "firebase/app";
import { useNavigate } from "react-router-dom"; // üîÑ Importation du hook React Router
import './form.css'; // Importation du fichier CSS

// Configuration Firebase
const firebaseConfig = {
  apiKey: "AIzaSyDnFYbHg1Swv42Fl7HXwTYWPT58NoR6rK0",
  authDomain: "cbt-chat-b4012.firebaseapp.com",
  projectId: "cbt-chat-b4012",
  storageBucket: "cbt-chat-b4012.firebasestorage.app",
  messagingSenderId: "271732410751",
  appId: "1:271732410751:web:421221458852006d58b24a",
  measurementId: "G-ZERDV0HDQF"
};

// Initialisation de Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

const staiQuestions = [
  "Je me sens calme.",
  "Je me sens tendu(e).",
  "Je me sens excit√©(e).",
  "Je regrette certaines choses.",
  "Je suis en s√©curit√©.",
  "Je me sens inquiet/inqui√®te.",
  "Je me sens satisfait(e).",
  "Je suis ennuy√©(e).",
  "Je me sens √† l‚Äôaise.",
  "Je me sens nerveux(se).",
  "Je suis bien repos√©(e).",
  "Je me sens pr√©occup√©(e).",
  "Je me sens d√©tendu(e).",
  "Je me sens content(e).",
  "Je me sens ind√©cis(e).",
  "Je me sens effray√©(e).",
  "Je me sens agr√©able.",
  "J‚Äôai l‚Äôimpression que je vais m‚Äô√©vanouir.",
  "Je me sens confiant(e).",
  "Je me sens tendu(e) int√©rieurement."
];

const options = [
  { label: "Pas du tout", value: 1 },
  { label: "Un peu", value: 2 },
  { label: "Moyennement", value: 3 },
  { label: "Tout √† fait", value: 4 }
];

export default function STAIForm() {
  const [responses, setResponses] = useState(Array(20).fill(null));
  const [score, setScore] = useState(null);
  const [submitted, setSubmitted] = useState(false);
  const [avantApres, setAvantApres] = useState("avant");
  const [userName, setUserName] = useState("");
  const [userId, setUserId] = useState(""); // Ajout du champ identifiant
  const [userFirstName, setUserFirstName] = useState(""); // Ajout du champ pr√©nom
  const [userLastName, setUserLastName] = useState(""); // Ajout du champ nom

  const navigate = useNavigate(); // üîÑ Hook pour navigation

  const getUserName = async () => {
    const user = auth.currentUser;
    if (user) {
      const userRef = collection(db, "users");
      const userQuery = await getDocs(userRef);
      const userData = userQuery.docs.find(doc => doc.id === user.uid);
      if (userData) {
        setUserName(userData.data().name);
      }
    }
  };

  useEffect(() => {
    getUserName();
  }, []);

  const handleChange = (index, value) => {
    const newResponses = [...responses];
    newResponses[index] = value;
    setResponses(newResponses);
  };

  const handleSubmit = async () => {
    if (responses.includes(null)) {
      alert("Veuillez r√©pondre √† toutes les questions.");
      return;
    }

    const total = responses.reduce((sum, val) => sum + val, 0);
    setScore(total);
    setSubmitted(true);

    try {
      await addDoc(collection(db, "stai_scores"), {
        responses,
        score: total,
        userName,
        userId,
        userFirstName,
        userLastName,
        avant_apres: avantApres,
        timestamp: serverTimestamp()
      });
      console.log("Score enregistr√© avec succ√®s");
    } catch (error) {
      console.error("Erreur lors de l'enregistrement:", error);
    }
  };

  return (
    <div className="form-container">
      <h1>√âchelle STAI - Anxi√©t√© d'√©tat</h1>
      <p>Indiquez √† quel point chaque affirmation correspond √† ce que vous ressentez maintenant.</p>

      {/* Section pour saisir l'identifiant, pr√©nom et nom */}
      <div className="user-info-container">
        <label>
          Identifiant:
          <input 
            type="text" 
            value={userId} 
            onChange={(e) => setUserId(e.target.value)} 
            className="input-field" 
            required 
          />
        </label>
        <label>
          Pr√©nom:
          <input 
            type="text" 
            value={userFirstName} 
            onChange={(e) => setUserFirstName(e.target.value)} 
            className="input-field" 
            required 
          />
        </label>
        <label>
          Nom:
          <input 
            type="text" 
            value={userLastName} 
            onChange={(e) => setUserLastName(e.target.value)} 
            className="input-field" 
            required 
          />
        </label>
      </div>

      <div className="space-y-8">
        {staiQuestions.map((question, index) => (
          <div key={index} className="question-item">
            <p className="question-text">{index + 1}. {question}</p>
            <div className="grid grid-cols-4 gap-6">
              {options.map((option, i) => (
                <label key={i} className="option-label">
                  <input
                    type="radio"
                    name={`q${index}`}
                    value={option.value}
                    checked={responses[index] === option.value}
                    onChange={() => handleChange(index, option.value)}
                    className="hidden"
                  />
                  <div className={`w-16 h-16 flex items-center justify-center rounded-full text-lg font-semibold ${responses[index] === option.value ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'} transition`}>
                    {option.label[0]}
                  </div>
                  <span className="text-sm">{option.label}</span>
                </label>
              ))}
            </div>
          </div>
        ))}
      </div>

      {/* Ajout de la s√©lection "Avant ou Apr√®s" */}
      <div className="avant-apres-selection">
        <label>r√©pondez-vous avant ou apr√®s la consultation ?</label>
        <select value={avantApres} onChange={(e) => setAvantApres(e.target.value)} className="select-input">
          <option value="avant">Avant</option>
          <option value="apres">Apr√®s</option>
        </select>
      </div>

      <div className="flex justify-center mt-8">
        <button
          className="submit-button"
          onClick={handleSubmit}
          type="button"
        >
          Soumettre
        </button>
      </div>

      {submitted && (
        <div className="score-container">
          <p className="score-text">Score total : {score} / 80</p>
          <p className={`score-${score < 40 ? 'low' : score > 60 ? 'high' : 'medium'}`}>
            {score < 40 && "Anxi√©t√© faible"}
            {score >= 40 && score <= 60 && "Anxi√©t√© mod√©r√©e"}
            {score > 60 && "Anxi√©t√© √©lev√©e"}
          </p>
        </div>
      )}

      <button onClick={() => navigate("/home")} className="go-home-button">
        Retour √† l'Accueil
      </button>
    </div>
  );
}
